#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from functools import reduce

#函数式编程

#函数名也是变量
a = abs
#编写高阶函数，就是让函数的参数能够接收别的函数。

def add(x,y,f):
	return f(x)+f(y)

>>> add(-2,-5,abs)
7
#map/reduce
map()返回的是Iterator,需要用list()把整个序列的next()都弄出来
>>> list(map(str,[1,2,3,23]))
['1', '2', '3', '23']
>>> from functools import reduce
>>> reduce(lambda x,y:x*10+y,[1,2,3])
123

#str转int
def str2int(s):

	def char2int(s):
		return {'0':0,'1':1,'2':2,'3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]

	return reduce( lambda x,y:x*10+y, map(char2int,s))

>>> str2int('192359126')
192359126

#练习1,字符串首字母大写
1,复杂
def normalize(name):
	normal =''
	for i,x in enumerate(name):
		if i == 0:
			x = x.upper()
		else:
			x = x.lower()

		normal = normal + x
	return normal
2,利用切片
def normalize(name):
	return name[0].upper()+name[1:].lower();

#filter 同样返回惰性Iterator,用list()
def isneed(s):
	return s%3 == 0
>>> list(filter(isneed,range(1,99)))
[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96]

#练习:打印1000以内的回数
def isneed(s):
	n = str(s)
	return n == n[::-1]

>>> list(filter(isneed,range(1,1000)))
[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999]

# sorted()排序
L = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]

def by_name(s):
    return s[0].lower()
print(sorted(L,key=by_name,reverse = True))